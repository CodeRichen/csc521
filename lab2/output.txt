### 檔案名稱: lab2.c
-------------------------------------------------
#include <pcap.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include "arp.h"
#include "netdevice.h"
#include "util.h"

// 外部函數聲明
void arptable_print(void);



/**
 * scan_next_ip() - 掃描下一個IP位址
 */
// 原本只掃 172.19.213.x
// 改成 172.19.208.1 ~ 172.19.223.254
uint8_t base_ip[4] = {172, 19, 208, 1}; 
int subnet_size = 4094; // 2^12 - 2 (排掉 network 和 broadcast)

void scan_next_ip(netdevice_t *p) {
    static int offset = 1;
    if (offset > subnet_size) {
        printf("Network scan completed!\n");
        arptable_print();
        return;
    }

    uint8_t target_ip[4];
    target_ip[0] = 172;
    target_ip[1] = 19;
    target_ip[2] = 208 + ((offset >> 8) & 0xF); 
    target_ip[3] = (offset & 0xFF);
    
    printf("Scanning IP: %d.%d.%d.%d\n",
           target_ip[0], target_ip[1], target_ip[2], target_ip[3]);

    arp_request(p, target_ip);
    offset++;
}


/**
 * main_proc() - The main body of this lab
 **/
int main_proc(netdevice_t *p) {
    int key;
    char buf[MAX_LINEBUF];
    ipaddr_t ip;
    
    printf("Starting ARP network discovery...\n");
    printf("Press Enter to stop and show results\n");
    printf("Or type an IP address to send specific ARP request\n\n");

#if (FG_ARP_SEND_REQUEST == 1)
    /*
     * Send ARP request to given default IP address
     */
    arp_request(p, NULL);
#endif /* FG_ARP_REQUEST */

    while (1) {
        /*
         * Process packets in the capture buffer
         */
        if (netdevice_rx(p) == -1) {
            break;
        }
        
        /*----------------------------------*
         * ARP網路掃描 - 插入在這裡持續執行 *
         *----------------------------------*/
        scan_next_ip(p);
        
        /*
         * If key is not pressed, continue to next loop
         */
        if (!readready()) {
            continue;
        }
        
        /*
         * If user pressed enter, exit the program
         */
        if ((key = fgetc(stdin)) == '\n') {
            break;
        }
        
        ungetc(key, stdin);
        if (fgets(buf, MAX_LINEBUF, stdin) == NULL) {
            break;
        }
        
        if ((ip = retrieve_ip_addr(buf)) == 0) {
            printf("Invalid IP (Enter to exit)\n");
        } else {
            printf("Sending ARP request to specific IP: %s\n", buf);
            arp_request(p, (unsigned char *)&ip);
        }
    }
    
    // 程式結束前顯示最終結果
    printf("\nFinal scan results:\n");
    arptable_print();
    
    return 0;
}

int main(int argc, char *argv[]) {
    char devname[MAX_LINEBUF], errbuf[PCAP_ERRBUF_SIZE];
    netdevice_t *p;
    
    printf("ARP Network Discovery Tool\n");
    printf("==========================\n");
    
    /*
     * Get the device name of capture interface
     */
    if (argc == 2) {
        strcpy(devname, argv[1]);
    } else if (netdevice_getdevice(0, devname) == NETDEVICE_ERR) {
        return -1;
    }
    
    /*
     * Open the specified interface
     */
    if ((p = netdevice_open(devname, errbuf)) == NULL) {
        fprintf(stderr, "Failed to open capture interface\n\t%s\n", errbuf);
        return -1;
    }
    
    printf("Capturing packets on interface %s\n", devname);
    
    /*
     * Register the packet handler callback of specific protocol
     */
    netdevice_add_proto(p, ETH_ARP, (ptype_handler)&arp_main);
    
    main_proc(p);
    
    /*
     * Clean up the resources
     */
    netdevice_close(p);
    return 0;
}

### 檔案名稱: config.c
-------------------------------------------------
#include <stdint.h>
uint8_t myethaddr[] = {0x00, 0x15, 0x5d, 0x61, 0x55, 0xce}; // eth0 的 MAC
uint8_t myipaddr[] = {172, 19, 213, 132};                   // eth0 的 IP
uint8_t defarpip[] = {172, 19, 208, 1};                     // gateway


### 檔案名稱: arptable.c
-------------------------------------------------

#include "util.h"
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#define MAX_ARP_ENTRIES 256

typedef struct {
    uint8_t ip[4];
    uint8_t eth[6];
    int valid;
} arp_entry_t;

static arp_entry_t arp_table[MAX_ARP_ENTRIES];
static int arp_count = 0;

/*
 * arptable_existed() - Check whether an IP address existed in the ARP table
 * \return The corresponding ethernet address. Return NULL if not found.
 */
uint8_t *arptable_existed(uint8_t *ipaddr) {
    for (int i = 0; i < arp_count; i++) {
        if (arp_table[i].valid && 
            memcmp(arp_table[i].ip, ipaddr, 4) == 0) {
            return arp_table[i].eth;
        }
    }
    return NULL;
}

/*
 * arptable_add() - Append a mapping of IP address to the ARP table
 */
void arptable_add(uint8_t *ip, uint8_t *eth) {
    // DEBUG: 確認函式被呼叫
    printf("[DEBUG] arptable_add() called for IP: %d.%d.%d.%d\n", 
           ip[0], ip[1], ip[2], ip[3]);
    
    // 檢查是否已存在
    if (arptable_existed(ip) != NULL) {
        printf("[DEBUG] IP already exists in table\n");
        return;
    }
    
    // 添加新條目
    if (arp_count < MAX_ARP_ENTRIES) {
        memcpy(arp_table[arp_count].ip, ip, 4);
        memcpy(arp_table[arp_count].eth, eth, 6);
        arp_table[arp_count].valid = 1;
        arp_count++;
        
        // 打印發現的機器
        printf("*** Found active machine: %d.%d.%d.%d -> %02x:%02x:%02x:%02x:%02x:%02x ***\n",
               ip[0], ip[1], ip[2], ip[3],
               eth[0], eth[1], eth[2], eth[3], eth[4], eth[5]);
    } else {
        printf("[DEBUG] ARP table full!\n");
    }
}

/*
 * arptable_print() - Print all entries in the ARP table
 */
void arptable_print(void) {
    printf("\n=== ARP Table ===\n");
    printf("Total active machines found: %d\n", arp_count);
    for (int i = 0; i < arp_count; i++) {
        if (arp_table[i].valid) {
            printf("%d.%d.%d.%d -> %02x:%02x:%02x:%02x:%02x:%02x\n",
                   arp_table[i].ip[0], arp_table[i].ip[1], 
                   arp_table[i].ip[2], arp_table[i].ip[3],
                   arp_table[i].eth[0], arp_table[i].eth[1], 
                   arp_table[i].eth[2], arp_table[i].eth[3], 
                   arp_table[i].eth[4], arp_table[i].eth[5]);
        }
    }
    printf("================\n\n");
}


